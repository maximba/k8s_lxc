- hosts: localhost

  connection: local
  tasks:
    - name: Creating LXD container
      lxd_container:
        name: "{{ item }}"
        state: started
        config:
          limits.cpu: "2"
          limits.memory: 4GB
          limits.memory.swap: "false"
          linux.kernel_modules: ip_tables,ip6_tables,netlink_diag,nf_nat,overlay
          raw.lxc: |
            lxc.apparmor.profile=unconfined
            lxc.cap.drop=
            lxc.cgroup.devices.allow=a
            lxc.mount.auto=proc:rw sys:rw
          security.nesting: "true"
          security.privileged: "true"
          environment.DISPLAY: :0
          raw.idmap: both 1000 1000
          user.user-data: |
            packages:
              - x11-apps
              - mesa-utils
        source:
          type: image
          mode: pull
          server: https://cloud-images.ubuntu.com/releases
          protocol: simplestreams
          alias: 19.04/amd64
        profiles: ["default"]
        wait_for_ipv4_addresses: true
        timeout: 600
      with_items: # launch LXD instance 
        - bastion


- hosts: localhost
  tasks:
    - name: Copy k8s admin.conf to localhost
      shell: lxc file pull k8s-master/etc/kubernetes/admin.conf /tmp/config
      tags:
        - skip_ansible_lint

    - name: Create ~/.kube directory if not exists
      become_user: ubuntu
      become: true
      delegate_to: bastion
      file:
        path: ~/.kube
        state: directory

    - name: Copy k8s admin.conf to bastion
      shell: lxc file push /tmp/config bastion/home/ubuntu/.kube/config      
      tags:
        - skip_ansible_lint

- hosts: bastion
  become: yes
  become_user: ubuntu
  tasks:
    - name: Install Firefox and its dependecies
      become_user: root
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - libcanberra-gtk-module
        - libcanberra-gtk3-module
        - dbus-x11
        - firefox

    - name: Install kubectl
      become_user: root
      shell: snap install kubectl --classic

    - name: Set authorized keys taken from github
      authorized_key:
        user: ubuntu
        state: present
        key: https://github.com/maximba.keys

    - name: Got token to kubeconfig
      shell: kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}') | grep "^token:" | cut -d ":" -f2 | xargs -L1 echo > /home/ubuntu/.kube/token
      
    - name: Add Token to config to enable Dashboard
      shell: 'grep -q "token:" /home/ubuntu/.kube/config  || echo "    token: $(cat /home/ubuntu/.kube/token)" >> /home/ubuntu/.kube/config'
      
    - name: Create kubeconfig symlink 
      file:
        src: ~/.kube/config
        dest: ~/kubeconfig
        owner: ubuntu
        group: ubuntu
        state: link      

    - name: Launch kubectl proxy
      shell: kill $(ps -ef | grep "[k]ubectl proxy" | awk '{print $2}') || kubectl proxy --address '0.0.0.0'
      tags:
        - kubectl_proxy      